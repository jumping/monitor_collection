#!/usr/bin/env python26
# -*- coding: UTF8 -*-
#
#   Jumping Qu @ BPO
#
#vim: ts=4 sts=4 et sw=4
#
import os
import sys
import datetime
import boto
import boto.ec2.cloudwatch

def config_inservice(as_name):
    """
    output config on inservice
    """
    head = "multigraph inservice_%s" % as_name.replace('-','_')
    title = "Number of instances for ELB %s" % as_name 
    category = "AWS"
    args = "-l 0 --base 1000"
    vlabel = "Numbers"
    info = "Show the instance number for ELB"
    item = """num.type GAUGE
num.label number of instances"""

    print "%s\ngraph_title %s\ngraph_category %s\ngraph_args %s\ngraph_scale no\ngraph_vlabel %s\ngraph_info %s\n%s\n" %(head,title,category,args,vlabel,info, item)

def config_latency(as_name):
    """
    output config on latency
    """
    head = "multigraph latency_%s" % as_name.replace('-','_')
    title = "Seconds of latency for ELB %s" % as_name
    category = "AWS"
    args = "-l 0 --base 1000"
    vlabel = "Seconds"
    info = "Show latency for requests"
    item = """maximum.type GAUGE
maximum.label Maximum latency
minimum.type GAUGE
minimum.label Minimum latency
average.type GAUGE
average.label Average latency"""

    print "%s\ngraph_title %s\ngraph_category %s\ngraph_args %s\ngraph_vlabel %s\ngraph_info %s\n%s\n" %(head,title,category,args,vlabel,info, item)
    
def config_requests(as_name):
    """
    output config on requests
    """
    head = "multigraph requests_%s" % as_name.replace('-','_')
    title = "Requests/sec for ELB %s" % as_name
    category = "AWS"
    args = "-l 0 --base 1000"
    vlabel = "Requests/Sec"
    info = "Show number of requests per second"
    item = """request.type ABSOLUTE
request.label requests on ELB"""

    print "%s\ngraph_title %s\ngraph_category %s\ngraph_args %s\ngraph_vlabel %s\ngraph_info %s\n%s\n" %(head, title,category,args,vlabel,info, item)

def inservice_number(as_name):
    """
    get the number of running instances
    """
    conn = boto.connect_elb()
    groups = conn.describe_instance_health(as_name)
    instances = [ group.state for group in groups ]
    return len(filter(lambda x: x =='InService', instances))

def latency(as_name):
    """
    get all latency in 5 minutes
    """
    minutes = 5
    end_date = datetime.datetime.utcnow()
    start_date = end_date - datetime.timedelta(minutes=minutes)
    dimensions = dict({u'LoadBalancerName':[as_name]})
    cw = boto.ec2.cloudwatch.CloudWatchConnection()
    metrics = cw.get_metric_statistics(5*60, start_date, end_date, "Latency", "AWS/ELB", ["Average", "Minimum", "Maximum"],dimensions) 
    m = metrics[0]
    return m

def requests(as_name):
    """
    get all requests in 5 minutes
    """
    minutes = 5
    end_date = datetime.datetime.utcnow()
    start_date = end_date - datetime.timedelta(minutes=minutes)
    dimensions = dict({u'LoadBalancerName':[as_name]})
    cw = boto.ec2.cloudwatch.CloudWatchConnection()
    return sum(x['Sum'] for x in cw.get_metric_statistics(60, start_date, end_date, "RequestCount", "AWS/ELB", ["Sum"], dimensions))

def link(as_name):
    """
    create symbol link with src_path
    """
    dst_dir = '/etc/munin/plugins'
    src_path = '/usr/share/munin/plugins/autoscaling'
    if not os.path.exists(src_path):
        print "The %s does not exist!" % src_path
        sys.exit(1)
    dst_name = "%s_%s" %(os.path.basename(src_path), as_name) 
    dst_path = os.path.join(dst_dir, dst_name)
    if not os.path.exists(dst_path):
        os.symlink(src_path, dst_path)

def scan_as():
    """
    scan AutoScaling groups, and create link with this file
    """
    conn = boto.connect_autoscale()
    groups  = conn.get_all_groups()
    as_names = []
    for group in groups:
        as_names.append(group.name.rsplit('-',1)[:-1][0])

    for as_name in as_names:
        link(as_name)


if __name__ == "__main__":
    as_name = sys.argv[0].rsplit('_',1)[-1]
    if 'group' in as_name:
        as_name = '-'.join(as_name.split('-')[:-1])
    if len(sys.argv) == 2:
        if sys.argv[1] == 'config':
            config_inservice(as_name)
            config_latency(as_name)
            config_requests(as_name)
            sys.exit(0)
        elif sys.argv[1] == 'ini':
            scan_as()
            sys.exit(0)
        else:
            print """You can input :
            %s config :::look config information
            %s ini    :::generate plugins for all AutoScaling
            """ % (sys.argv[0], sys.argv[0])
            sys.exit(0)

    m = latency(as_name)
    maximum = m['Maximum']
    minimum = m['Minimum']
    average = m['Average']
    name = as_name.replace('-','_')
    print "multigraph inservice_%s" % name
    print "num.value %d\n" % inservice_number(as_name)
    print "multigraph latency_%s" % name
    print "maximum.value %f\nminimum.value %f\naverage.value %f\n" %(maximum,minimum,average)
    print "multigraph requests_%s" % name
    print "request.value %d" % requests(as_name)
    sys.exit(0)
